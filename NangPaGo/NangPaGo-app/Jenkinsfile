pipeline {
    agent any
    environment {
        SCRIPT_PATH = '/var/jenkins_home/nangpago/NangPaGo/NangPaGo-app'
        PROJECT_DIR = 'NangPaGo'
        APP_DIR = 'NangPaGo/NangPaGo-app'
        REACT_DIR = 'NangPaGo/NangPaGo-app/frontend'
        DOCKER_DIR = 'NangPaGo/NangPaGo-app/docker'
        DISCORD_WEBHOOK = credentials('discord-webhook')
    }
    tools {
        gradle 'gradle-8.11'
        nodejs 'node-18-alpine'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Create Config Files') {
            steps {
                withCredentials([file(credentialsId: 'app-env-file', variable: 'ENV_FILE')]) {
                    sh '''
                        mkdir -p ./${APP_DIR}/src/main/resources
                        mkdir -p ./${REACT_DIR}
                        mkdir -p ./${DOCKER_DIR}

                        cp $ENV_FILE ./${APP_DIR}/src/main/resources/.env
                        cp $ENV_FILE ./${REACT_DIR}/.env
                        cp $ENV_FILE ./${DOCKER_DIR}/.env
                    '''
                }
            }
        }
        stage('Create Firebase Config') {
            steps {
                withCredentials([file(credentialsId: 'FIREBASE_KEY_FILE', variable: 'FIREBASE_KEY_PATH')]) {
                    sh '''
                        mkdir -p ./${APP_DIR}/src/main/resources/firebase
                        cp $FIREBASE_KEY_PATH ./${APP_DIR}/src/main/resources/firebase/nangpago.json
                    '''
                }
            }
        }
        stage('Prepare'){
            steps {
                dir(PROJECT_DIR) {
                    sh './gradlew clean'
                }
                dir(REACT_DIR) {
                    sh 'npm install'
                }
            }
        }
        stage('Build') {
            steps {
                dir(PROJECT_DIR) {
                    sh './gradlew :NangPaGo-app:build -x test'
                }
                dir(REACT_DIR) {
                    sh 'npm run build'
                }
            }
        }
        stage('Deploy') {
            steps {
                dir(PROJECT_DIR) {
                    script {
                        def version = sh(script: "./gradlew properties -q | grep 'version:' | awk '{print \$2}'", returnStdout: true).trim()

                        // ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Î≤ÑÏ†Ñ ÏÑ§Ï†ï
                        env.APP_VERSION = version
                    }
                }
                sh '''
                    mkdir -p ${SCRIPT_PATH}
                    mkdir -p ${SCRIPT_PATH}/docker
                    mkdir -p ${SCRIPT_PATH}/frontend

                    # ÎèÑÏª§ ÌååÏùº Î≥µÏÇ¨
                    cp ./${DOCKER_DIR}/docker-compose.blue.yml ${SCRIPT_PATH}/docker/
                    cp ./${DOCKER_DIR}/docker-compose.green.yml ${SCRIPT_PATH}/docker/

                    # ÌîÑÎ°†Ìä∏ÏóîÎìú ÌååÏùº Î≥µÏÇ¨
                    cp -r ./${REACT_DIR}/* ${SCRIPT_PATH}/frontend/

                    # Î∞±ÏóîÎìú ÌååÏùº Î≥µÏÇ¨
                    cp ./${APP_DIR}/build/libs/*.jar ${SCRIPT_PATH}/
                    cp ./${APP_DIR}/Dockerfile ${SCRIPT_PATH}/

                    cp ./${APP_DIR}/scripts/deploy.sh ${SCRIPT_PATH}/
                    chmod +x ${SCRIPT_PATH}/deploy.sh
                '''

                withCredentials([file(credentialsId: 'app-env-file', variable: 'ENV_FILE')]) {
                    sh '''
                        cp $ENV_FILE ${SCRIPT_PATH}/.env
                        cp $ENV_FILE ${SCRIPT_PATH}/docker/.env
                        cp $ENV_FILE ${SCRIPT_PATH}/frontend/.env

                        ${SCRIPT_PATH}/deploy.sh
                    '''
                }
            }
        }
    }
    post {
        success {
            discordSend description: """
                üéâ **ÎπåÎìú Î∞è Î∞∞Ìè¨ ÏÑ±Í≥µ**

                **ÌîÑÎ°úÏ†ùÌä∏**: ${env.JOB_NAME}
                **ÎπåÎìú Î≤àÌò∏**: #${env.BUILD_NUMBER}
                **Î≤ÑÏ†Ñ**: ${env.APP_VERSION}
                **ÏÜåÏöî ÏãúÍ∞Ñ**: ${currentBuild.durationString}
                """,
                link: env.BUILD_URL,
                result: currentBuild.currentResult,
                title: "NangPaGo ÎπåÎìú/Î∞∞Ìè¨ ÏÑ±Í≥µ",
                webhookURL: DISCORD_WEBHOOK
        }

        failure {
            discordSend description: """
                ‚ùå **ÎπåÎìú ÎòêÎäî Î∞∞Ìè¨ Ïã§Ìå®**

                **ÌîÑÎ°úÏ†ùÌä∏**: ${env.JOB_NAME}
                **ÎπåÎìú Î≤àÌò∏**: #${env.BUILD_NUMBER}
                **Î≤ÑÏ†Ñ**: ${env.APP_VERSION}
                **ÏÜåÏöî ÏãúÍ∞Ñ**: ${currentBuild.durationString}
                """,
                link: env.BUILD_URL,
                result: currentBuild.currentResult,
                title: "NangPaGo ÎπåÎìú/Î∞∞Ìè¨ Ïã§Ìå®",
                webhookURL: DISCORD_WEBHOOK
        }
    }
}
