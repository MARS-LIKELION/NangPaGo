name: CI/CD

on:
  pull_request:
    branches:
      - main
      - 'release/*'
  release:
    types: [published]

jobs:
  build: # CI (BE & FE Build)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Firebase 설정 파일 생성
      - name: Create Firebase config file
        run: |
          mkdir -p ./NangPaGo-be/src/main/resources/firebase
          echo '${{ secrets.FIREBASE_SECRET_KEY }}' > ./NangPaGo-be/src/main/resources/firebase/nangpago.json

      # Backend Build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./NangPaGo-be/gradlew

      - name: Build with Gradle
        run: cd NangPaGo-be && ./gradlew build testClasses -x test

      - name: Upload Backend Build Artifact # Deploy를 위해 build 파일 복사
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: NangPaGo-be/build/libs/

      # Frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'

      - name: Install Frontend Dependencies
        run: cd NangPaGo-fe && npm install

      - name: Build Frontend
        run: cd NangPaGo-fe && npm run build

      - name: Upload Frontend Build Artifact # Deploy를 위해 build 파일 복사
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: NangPaGo-fe/dist/

  deploy: # CD (publish app with Docker hub)
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      # Docker image 에 Tag 할 version 정보 가져오기
      - name: Get version from gradle.properties
        id: get_version
        run: |
          VERSION=$(grep '^version=' ./NangPaGo-be/gradle.properties | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Download Build Artifacts
      - name: Download Backend Build
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: NangPaGo-be/build/libs/

      - name: Download Frontend Build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: NangPaGo-fe/dist/

      # Docker Build & Push
      - name: Backend Docker build & push
        run: |
          echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker buildx build --platform linux/amd64 -t zooxop/nangpago-app:${{ env.VERSION }} -t zooxop/nangpago-app:latest -f ./NangPaGo-be/Dockerfile ./NangPaGo-be --push

      - name: Frontend Docker build & push
        run: |
          echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker buildx build --platform linux/amd64 -t zooxop/nangpago-frontend:${{ env.VERSION }} -t zooxop/nangpago-frontend:latest -f ./NangPaGo-fe/Dockerfile ./NangPaGo-fe --push

      # change Docker images and re-start containers on Server
      - name: Deploy to instance
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.SERVER_ADDRESS }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker rm -f react-front spring-boot-app || true
            sed -i 's/^API_SERVER_IMAGE=.*/API_SERVER_IMAGE=zooxop\/nangpago-app:${{ env.VERSION }}/' .env
            sed -i 's/^REACT_SERVER_IMAGE=.*/REACT_SERVER_IMAGE=zooxop\/nangpago-frontend:${{ env.VERSION }}/' .env
            sudo docker pull zooxop/nangpago-app:${{ env.VERSION }}
            sudo docker pull zooxop/nangpago-frontend:${{ env.VERSION }}
            docker-compose -p nangpago up -d
            sudo docker image prune -f -a
